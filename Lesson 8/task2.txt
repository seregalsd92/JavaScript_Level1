2.
а) Мы получим undefind т.к. интерпритатор JS с при считывании документа автоматически заводит для переменных var и функций function declaration поля в глобальном объекте Window. 
По этому при использовании оператора for in нам вернется true, затем с помощью оператора ! "не" условие в if изменится на false и мы никогда в него не зайдем. Значение a не будет присвоено
и выведется undefind.

b) При использовании такой конструкции записи имя функции "а" видно только внутри тела функции. Во внешке, его не видно и к функции можно обратиться только через переменную b.
По этому alert(a) вернет нам сообщение об ошибке, что "а" не определена.

с) Мы получим код тела функции. интерпритатор JS с при считывании документа автоматически заводит для переменных var и функций function declaration поля в глобальном объекте Window.
И т.к. у нас уже есть поле "а" в котором лежит тело функции, то при объявлении переменной a, без присваения ей значения ничего не произойдет. В итоге alert вернет нам код тела функции.

d) Мы получим 10. Внутри функции встроенный массив arguments[] содержит параметры функции. Соответсвенно arguments[3] содержит третий аргумент функции и ему присваиваеистся
значение 10. После чего выводится алерторм.

e) Мы получим контекст Window. Изначально функция в глобальной области имеет контекст Window. Вызов этой функции с методом явной передачи контекста call переопределяет контекст,
но т.к. у нас в качестве аргумента указан null, то контекст будет взят из вне, т.е. будет Window. Если бы был указан "use strict" то контекст был бы null внутри функции.